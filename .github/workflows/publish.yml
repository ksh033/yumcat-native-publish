name: 'publish'
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'
# 工作流环境变量
env:
  # 壳工程
  SHELL_REPO: ksh033/yumcat-native-shell
  # 壳工程ref
  SHELL_REPO_REF: 0.63.2
  # 壳工程目录
  SHELL_REPO_PATH: yumcat-native-shell
jobs:
  build: # make sure build/ci work properly
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [14.x]

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/checkout@v2
      - name : GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Get commit message
        run: |
          COMMIT_MESSAGE=$(git log --format=%B -n 1)
          echo "commitmsg=${COMMIT_MESSAGE}" >> $GITHUB_ENV
      
      - name: Set Current Version
        if: startsWith( env.commitmsg , 'chore(release):' )
        shell: bash -ex {0}
        run: |
          CURRENT_VERSION=$(node -p 'require("./package.json").version')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
  
      - run: npm install -g yarn
      - run: yarn config set registry https://registry.yarnpkg.com

      - uses: ./
        with:
          REPO: ${{ env.SHELL_REPO }}
          REPO_REF: ${{ env.SHELL_REPO_REF }}
          REPO_PATH: ${{ env.SHELL_REPO_PATH }}
          BUILD_CMD: yarn test

      - name: Tag Check
        if: startsWith( env.commitmsg , 'chore(release):' )
        id: tag_check
        shell: bash -ex {0}
        run: |
          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            echo "::set-output name=exists_tag::true"
          else
            echo "::set-output name=exists_tag::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Git Tag
        if: startsWith( env.commitmsg , 'chore(release):' ) && steps.tag_check.outputs.exists_tag == 'false'
        uses: azu/action-package-version-to-git-tag@v1
        with:
          version: ${{ env.CURRENT_VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: "v"
      - name: Create Release
        id: create_release
        if: startsWith( env.commitmsg , 'chore(release):' ) && steps.tag_check.outputs.exists_tag == 'false' && github.event.pull_request.merged == true
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          # Copy Pull Request's tile and body to Release Note
          release_name: ${{ github.event.pull_request.title }}
          body: |
            ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false

      # - run: |
      #     npm install
      # - run: |
      #     npm run all
  
  # test: # make sure the action works on a clean machine without building
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: ./
  #       with:
  #         milliseconds: 1000
